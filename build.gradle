repositories {
  mavenCentral()
}

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:0.10.0'
  }
}

apply plugin: 'android-library'

android {
  compileSdkVersion 19
  buildToolsVersion '19.1.0'

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      res.srcDirs = ['res']
    }
  }

  lintOptions {
    abortOnError true
    checkAllWarnings true
    warningsAsErrors true
    textReport true
    textOutput 'stdout'
    xmlReport false
    htmlReport true
  }
}

// ----------- Unit tests ---------------

// extend the runtime
configurations {
  unitTestCompile.extendsFrom runtime
  unitTestRuntime.extendsFrom unitTestCompile
}

// add to dependencies
dependencies {
  unitTestCompile files("$project.buildDir/classes/debug")
  unitTestCompile fileTree(dir: 'tests/unit/libs/', include: '*.jar')
  unitTestCompile 'com.google.android:android:4.0.1.2'
}

// add a new unitTest sourceSet
sourceSets {
  unitTest {
    java.srcDir file('tests/unit/src')
  }
}

// add the unitTest task
task unitTest(type:Test, dependsOn: assemble) {
  description = "run unit tests"
  testClassesDir = project.sourceSets.unitTest.output.classesDir
  classpath = project.sourceSets.unitTest.runtimeClasspath
}

// bind to check
check.dependsOn unitTest

// ---------------- Pmd ------------------

apply plugin: 'pmd'

pmd {
  ruleSetFiles = files('pmd_rules.xml')
}

// ----------- Javadoc -----------------

task androidJavadocs(type: Javadoc) {
  source = android.sourceSets.main.allSource
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar) {
  classifier = 'javadoc'
  from androidJavadocs.destinationDir
}

// -------------- Sources Jar ----------

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.allSource
}

// ------------- Define the artifacts ---------
artifacts {
  archives androidJavadocsJar, sourcesJar
}

// --------------- Publishing -------------
apply plugin: 'maven'
apply plugin: 'signing'

signing {
  sign configurations.archives
}

group = "com.ncona"
archivesBaseName = "conversion-graph"
version = "1.1"

if (hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'Conversion graph'
          packaging 'aar'
          description 'Graphs a conversion path'
          url 'https://github.com/soonick/conversion-graph'

          scm {
            url 'https://github.com/soonick/conversion-graph'
            connection 'scm:git:https://github.com/soonick/conversion-graph.git'
          }

          licenses {
            license {
              name 'The Apache License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id 'soonick'
              name 'Adrian Ancona Novelo'
              email 'soonick5@yahoo.com.mx'
            }
          }
        }
      }
    }
  }
}
